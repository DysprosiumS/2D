import pandas as pd
import numpy as np
import math


def calculate_work(accelerations, displacements, dimension, indx, colx, Mass):
    works_j = pd.DataFrame(data=0, index=np.arange(indx-2), columns=np.arange(colx), dtype=np.float64)
    works_ev = pd.DataFrame(data=0, index=np.arange(indx-2), columns=np.arange(colx), dtype=np.float64)
    if dimension == 1:
        for j in range(colx):
            for i in range(indx - 2):
                acceleration = accelerations.iat[i, j]
                displacement = displacements.iat[i, j]
                works_j.iat[i, j] = abs(Mass * acceleration * displacement/10**12)  # in [J]
                works_j.iat[i, j].round(9)
        return works_j  # in [J]
    if dimension == 2:
        for j in range(colx):
            for i in range(indx - 2):
                acceleration = accelerations.iat[i, j]
                displacement = displacements.iat[i, j]
                works_ev.iat[i, j] = abs(Mass * acceleration * displacement*(10**7)/1.6)  # in [eV]
                works_ev.iat[i, j].round(9)
        return works_ev  # in [eV]


def calculate_work_2d(workx, worky, indx, colx):
    work_2d = pd.DataFrame(data=0, index=np.arange(indx - 2), columns=np.arange(colx), dtype=np.float64)
    for j in range(colx):
        for i in range(indx - 2):
            work_x = workx.iat[i, j]
            work_y = worky.iat[i, j]
            work_2d.iat[i, j] = work_x + work_y
            work_2d.iat[i, j] = work_2d.iat[i, j].round(20)
    return work_2d
    
